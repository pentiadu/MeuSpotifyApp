import streamlit as st
import pandas as pd
import spotipy
from spotipy.oauth2 import SpotifyOAuth
import matplotlib.pyplot as plt

# Configura√ß√µes OAuth do Spotify
SPOTIFY_CLIENT_ID = "fa95b32491d048ae9762bf882e9c33c9"  # Substitua pelo seu Client ID
SPOTIFY_CLIENT_SECRET = "7dfc7349c85f44f3b1d6d36cf93c5541"  # Substitua pelo seu Client Secret
SPOTIFY_REDIRECT_URI = "http://localhost:8501"  # Certifique-se de usar este Redirect URI
SCOPE = "user-top-read"  # Escopo necess√°rio para acessar as m√∫sicas mais ouvidas do usu√°rio

st.set_page_config(page_title="Spotify Analytics", layout="wide")


# Fun√ß√£o para autenticar o usu√°rio e acessar a API Spotify
@st.cache_resource
def authenticate_spotify():
    """
    Autentica e cria um cliente Spotify usando Authorization Code Flow.
    """
    auth_manager = SpotifyOAuth(
        client_id=SPOTIFY_CLIENT_ID,
        client_secret=SPOTIFY_CLIENT_SECRET,
        redirect_uri=SPOTIFY_REDIRECT_URI,
        scope=SCOPE,
    )
    sp = spotipy.Spotify(auth_manager=auth_manager)
    return sp


# Fun√ß√£o para buscar as 10 m√∫sicas mais ouvidas do usu√°rio
def get_user_top_tracks(sp):
    """
    Retorna um dataframe das 10 m√∫sicas mais ouvidas pelo usu√°rio, incluindo:
    - Nome da m√∫sica
    - Artista(s) principal(is)
    - Popularidade da m√∫sica
    """
    try:
        top_tracks = sp.current_user_top_tracks(limit=10, time_range="short_term")
        track_data = []
        for track in top_tracks["items"]:
            track_data.append({
                "M√∫sica": track["name"],
                "Artista(s)": ", ".join([artist["name"] for artist in track["artists"]]),
                "Popularidade": track["popularity"]
            })

        df = pd.DataFrame(track_data)
        return df

    except spotipy.exceptions.SpotifyException as e:
        st.error(f"Erro ao acessar a API do Spotify: {e}")
        return pd.DataFrame()


# Fun√ß√£o para plotar um gr√°fico de pizza com as m√∫sicas mais ouvidas
def plot_pie_chart(df):
    """
    Gera um gr√°fico de pizza baseado na popularidade das m√∫sicas mais ouvidas.
    """
    plt.figure(figsize=(8, 6))
    labels = df.apply(lambda x: f"{x['M√∫sica']} - {x['Artista(s)']}", axis=1)
    plt.pie(
        df["Popularidade"],
        labels=labels,
        autopct='%1.1f%%',
        startangle=140,
        textprops={'fontsize': 8}
    )
    plt.title("Popularidade das 10 m√∫sicas mais ouvidas")
    st.pyplot(plt)


# Fun√ß√£o principal da aplica√ß√£o
def main():
    st.title("üé∂ Spotify Analytics")
    st.write("Autentique-se no Spotify para ver suas 10 m√∫sicas mais ouvidas e um gr√°fico da sua popularidade.")

    # Autentica√ß√£o do usu√°rio no Spotify
    sp = authenticate_spotify()

    # Buscar informa√ß√µes do usu√°rio
    try:
        user_info = sp.current_user()
        st.success(f"‚úÖ Usu√°rio autenticado como: **{user_info['display_name']}**")
        st.write(f"üìß **Email:** {user_info.get('email', 'N√£o dispon√≠vel')}")
    except Exception as e:
        st.error("Erro ao buscar informa√ß√µes do usu√°rio. Certifique-se de que est√° autenticado.")
        st.error(str(e))
        return

    # Buscar Top Tracks do usu√°rio
    st.subheader("üéµ Suas M√∫sicas Mais Ouvidas (√∫ltimos 30 dias)")
    with st.spinner("Buscando suas m√∫sicas mais ouvidas... üéß"):
        top_tracks_df = get_user_top_tracks(sp)

    # Exibir as m√∫sicas em um dataframe
    if not top_tracks_df.empty:
        st.write("Aqui est√£o suas m√∫sicas mais ouvidas:")
        st.dataframe(top_tracks_df, use_container_width=True)

        # Gr√°fico de pizza baseado na popularidade das m√∫sicas
        st.subheader("üìä Popularidade das Top 10 M√∫sicas")
        plot_pie_chart(top_tracks_df)
    else:
        st.warning("‚ö†Ô∏è N√£o foi poss√≠vel encontrar m√∫sicas mais ouvidas no seu hist√≥rico.")


# Executando a aplica√ß√£o
if __name__ == "__main__":
    main()
