import streamlit as st
import pandas as pd
import spotipy
from spotipy.oauth2 import SpotifyOAuth
import matplotlib.pyplot as plt

# Configura√ß√µes do OAuth Spotify
SPOTIFY_CLIENT_ID = "SEU_CLIENT_ID"  # Substitua pelo seu Client ID
SPOTIFY_CLIENT_SECRET = "SEU_CLIENT_SECRET"  # Substitua pelo seu Client Secret
SPOTIFY_REDIRECT_URI = "http://localhost:8501"  # Certifique-se de usar este Redirect URI
SCOPE = "user-top-read"  # Escopo necess√°rio para acessar m√∫sicas mais ouvidas do usu√°rio

st.set_page_config(page_title="Spotify Analytics", layout="wide")


# Fun√ß√£o para autenticar o usu√°rio e acessar a API Spotify
def authenticate_spotify():
    """
    Autentica e cria um cliente Spotify usando Authorization Code Flow.
    """
    auth_manager = SpotifyOAuth(
        client_id=SPOTIFY_CLIENT_ID,
        client_secret=SPOTIFY_CLIENT_SECRET,
        redirect_uri=SPOTIFY_REDIRECT_URI,
        scope=SCOPE,
        show_dialog=True  # Sempre mostrar a janela de login para novos usu√°rios
    )
    sp = spotipy.Spotify(auth_manager=auth_manager)
    return sp


# Fun√ß√£o para buscar as 10 m√∫sicas mais ouvidas do usu√°rio
def get_user_top_tracks(sp):
    """
    Retorna um DataFrame das 10 m√∫sicas mais ouvidas pelo usu√°rio, incluindo:
    - Nome da m√∫sica
    - Artista(s) principal(is)
    - Popularidade da m√∫sica
    """
    try:
        top_tracks = sp.current_user_top_tracks(limit=10, time_range="short_term")
        track_data = []
        for track in top_tracks["items"]:
            track_data.append({
                "M√∫sica": track["name"],
                "Artista(s)": ", ".join([artist["name"] for artist in track["artists"]]),
                "Popularidade": track["popularity"]
            })

        df = pd.DataFrame(track_data)
        return df

    except Exception as e:
        st.error(f"Erro ao acessar a API do Spotify: {e}")
        return pd.DataFrame()


# Fun√ß√£o para plotar um gr√°fico de pizza com as m√∫sicas mais ouvidas
def plot_pie_chart(df):
    """
    Gera um gr√°fico de pizza baseado na popularidade das m√∫sicas mais ouvidas.
    """
    plt.figure(figsize=(8, 6))
    labels = df.apply(lambda x: f"{x['M√∫sica']} - {x['Artista(s)']}", axis=1)
    plt.pie(
        df["Popularidade"],
        labels=labels,
        autopct='%1.1f%%',
        startangle=140,
        textprops={'fontsize': 8}
    )
    plt.title("Popularidade das 10 m√∫sicas mais ouvidas")
    st.pyplot(plt)


# Configura√ß√£o do estado da sess√£o para armazenar dados individuais
if "authenticated" not in st.session_state:
    st.session_state["authenticated"] = False
if "spotify_client" not in st.session_state:
    st.session_state["spotify_client"] = None


# Fun√ß√£o principal da aplica√ß√£o
def main():
    st.title("üé∂ Spotify Analytics")
    st.write(
        "üíª Uma ferramenta que permite m√∫ltiplos usu√°rios visualizar suas pr√≥prias m√∫sicas mais ouvidas no Spotify.")

    # Autentica√ß√£o condicional com o Spotify
    if not st.session_state["authenticated"]:
        with st.spinner("Aguardando autentica√ß√£o..."):
            try:
                sp = authenticate_spotify()
                st.session_state["spotify_client"] = sp
                st.session_state["authenticated"] = True
                st.success("‚úÖ Autenticado com sucesso!")
                st.query_params  # Remove par√¢metros extras da URL
            except Exception as e:
                st.error("Erro na autentica√ß√£o. Por favor, tente novamente.")
                st.error(str(e))
                return
    else:
        sp = st.session_state["spotify_client"]

    # Buscar informa√ß√µes do usu√°rio autenticado
    try:
        user_info = sp.current_user()
        st.write(f"üë§ **Usu√°rio autenticado como:** {user_info['display_name']}")
        st.write(f"üìß **Email:** {user_info.get('email', 'Email n√£o dispon√≠vel')}")
    except Exception as e:
        st.error("Erro ao buscar informa√ß√µes do usu√°rio.")
        st.error(str(e))
        return

    # Buscar Top Tracks do usu√°rio
    st.subheader("üéµ Suas M√∫sicas Mais Ouvidas (√∫ltimos 30 dias)")
    with st.spinner("Buscando suas m√∫sicas mais ouvidas... üéß"):
        top_tracks_df = get_user_top_tracks(sp)

    # Exibir as m√∫sicas em um dataframe
    if not top_tracks_df.empty:
        st.write("Aqui est√£o suas m√∫sicas mais ouvidas:")
        st.dataframe(top_tracks_df, use_container_width=True)

        # Gr√°fico de pizza baseado na popularidade das m√∫sicas
        st.subheader("üìä Popularidade das Top 10 M√∫sicas")
        plot_pie_chart(top_tracks_df)
    else:
        st.warning("‚ö†Ô∏è Parece que voc√™ n√£o tem um hist√≥rico de m√∫sicas mais ouvidas recentemente.")

    # Dar a op√ß√£o de logout
    if st.button("üîí Logout"):
        for key in list(st.session_state.keys()):
            del st.session_state[key]
        st.warning("Voc√™ foi desconectado! Atualize a p√°gina para realizar o login novamente.")


# Executando a aplica√ß√£o
if __name__ == "__main__":
    main()
